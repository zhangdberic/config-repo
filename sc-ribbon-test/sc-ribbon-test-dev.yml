server:
  port: 8003
# 关闭安全认证,否则actuator提供的url访问报错401,例如:/refresh或/evn等.  
management:
  security:
    enabled: false    
spring:
  cloud:
    config:
      # java -D属性可以覆盖本远程参数
      overrideSystemProperties: false
    #loadbalancer: 
    #  retry: 
    #    # 关闭除zuul所有的请求重试
    #    enabled: false
  # 和spring-cloud-starter-bus-amqp配合,用于/bus/refresh分布式服务属性刷新
  rabbitmq:
    host: 192.168.5.29
    port: 5672
    username: admin
    password: Rabbitmq-401
  # spring boot devtools  
  devtools:
    restart:
      enabled: false   
# eureka客户端    
eureka:
  client:
    service-url:
      # 基于Basic的Security的访问eureka服务器
      defaultZone: http://sc-eureka:veDSJeUX-JSxkWrk@192.168.5.78:8070/eureka/,http://sc-eureka:veDSJeUX-JSxkWrk@192.168.5.78:8071/eureka/
    # 客户端监控检查(定时检查并发送健康状态到eureka服务器)  
    healthcheck:
      enabled: true
  instance:
    # 基于ip地址注册到eureka         
    prefer-ip-address: true            
# 日志    
logging:
  level:
    root: INFO
# 配置ribbon属性
# 1.配置某个服务的ribbon属性
sc-sampleservice:
  ribbon:
    # 测试随机负载均衡 
    #NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
    # 同一个实例最大重试测试，不包括首次调用
    MaxAutoRetries: 0
    # 重试其它实例的最大次数(例如:部署了同一个服务3个实例,此处应该设置为2）,不包括首次调用所选的实例
    MaxAutoRetriesNextServer: 0
    # 是否所有的操作都进行重试(默认只有GET请求开启重试，POST请求关闭重试)，默认为false
    #OkToRetryOnAllOperations: true
# 2.配置全局的ribbon属性
#ribbon:
# NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
# 3.测试启动加载(默认延时加载)ribbon服务调用上下文,如果有多个服务则用逗号加空格分隔(例如:s1, s2, s3)
#ribbon: 
#  eager-load: 
#   enabled: true
#   clients: sc-sampleservice
